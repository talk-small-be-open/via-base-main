user  www-data;
worker_processes auto;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    # Strange. But found it on google
    server_names_hash_bucket_size 64;
    
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';

    sendfile        on;
    keepalive_timeout  65;

    client_max_body_size 0; # disable limit


    # Gem instances for load balancing
    upstream gems {
        ip_hash;
            
        {% for port in via.gemPorts %}
        server 127.0.0.1:{{port}} max_conns=1 max_fails=3;
        {% endfor %}

    }

		# peerJS
		map $http_upgrade $connection_upgrade {
				default upgrade;
        '' close;
		}

		# Define request limit, used for demo and app
		limit_req_zone $binary_remote_addr zone=demo:5m rate=1r/s;
		limit_req_zone $binary_remote_addr zone=app:10m rate=2r/s;
		limit_req_status 509; # = "Bandwidth exceeded"

    # Via Server
    server {

        # TODO: Filter by GeoIP, Bad bots blocker, ...

        {% if via.useSsl %}
        
        listen 443 ssl http2;

        ssl_certificate /etc/letsencrypt/live/via/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/via/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf;
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

        {% else %}
        listen 80;
        {% endif %}

        server_name {{via.appDomains|join(" ")}};

        root {{via.installationPath}}/via_base/web_root;

				# Simple block some annoying idiots
				# OPTIMIZE: Use something like https://github.com/mitchellkrogza/nginx-ultimate-bad-bot-blocker
				if ($http_user_agent ~ (LieBaoFast|UCBrowser|MQQBrowser|Mb2345Browser|zh-CN|MicroMessenger|zh_CN|Kinza|Bytespider|Baiduspider|Sogou|AspiegelBot|PetalBot|adscanner|serpstatbot|spaziodat|undefined) ) {
					 return 403;
				}

        # Pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        # For uploader PlUpload
        location ~ \.php$ {
            include snippets/fastcgi-php.conf;
            fastcgi_pass unix:/run/php/php7.2-fpm.sock;
        }

				# If root is accessed, then redirect to app
				location = / {
    		 	  return 301 $scheme://$host/app;
				}

        # General rule, serve static file or redirect to app
        location / {

						{% include 'betatest_auth.j2' %}
            
            try_files $uri @gemstone;
        }


        {% for path in ['/app', '/via-admin'] -%}
        # Speedup access to main app (Frontend and Backend)
        location {{path}} {

						# Limit access speed
						limit_req zone=app burst=5;

						{% include 'betatest_auth.j2' %}
            
						{% include 'proxy_to_gems.j2' %}
        }
        {% endfor %}

        # Control access to demo app
				# See https://docs.nginx.com/nginx/admin-guide/security-controls/controlling-access-proxied-http/#limit_req
        location /demo {

						# Since the demo is public
						limit_req zone=demo burst=5;

						{% include 'betatest_auth.j2' %}
            
						{% include 'proxy_to_gems.j2' %}
        }

        # Control access to portal page
        location /portal {

						# Limit access speed
						limit_req zone=app burst=5;

						{% include 'betatest_auth.j2' %}
            
						{% include 'proxy_to_gems.j2' %}
        }


        # Caching, see https://web.dev/http-cache/

        # Aggressively cache assets
        location /assets {
            add_header Cache-Control "public, max-age=31536000";
            etag on;
            access_log off;
        }

        # Moderately cache application static files CSS/JS
        {% for path in ['/js', '/css', '/images', '/site', '/lib'] -%}
        location {{path}} {
            {% if via.isBeta -%}
            # Cache for 5 minutes
            add_header Cache-Control "public, no-cache, max-age=300";
            {% else -%}
            # Cache for 24h
            add_header Cache-Control "public, no-cache, max-age=361440";
            {% endif %}

            etag on;
            access_log off;
        }
        {% endfor %}


				# P2P Server of peerjs
				# See https://github.com/peers/peerjs-server
				location /peerjs/ {
            proxy_pass   http://127.0.0.1:9001/peerjs/;
            # proxy_pass_request_headers      on;
            # proxy_set_header Host            $host;
            # proxy_set_header X-Forwarded-For $remote_addr;

            # WebSocket proxying, see https://nginx.org/en/docs/http/websocket.html
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection $connection_upgrade;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }



        # Reverse proxy to GemStone gems
        location @gemstone {
						{% include 'proxy_to_gems.j2' %}
        }


        # X-Sendfile for generated files (ZIP, PDF, ...) and asset file download
        location {{via.installationPath}}/tmp {
            internal;
            root /;
        }
        location {{via.installationPath}}/via_base/tmp {
            internal;
            root /;
        }
        location {{via.installationPath}}/via_base/web_root/assets {
            internal;
            root /;
        }

        # Custom error page, if App is not running (looks nicer)
        error_page 502 /errors/502.html;

    }

    {% if via.useSsl %}
    # Redirect HTTP->HTTPS
    server {
        listen     80;
				server_name {{via.appDomains|join(" ")}};

        return 301 https://$host$request_uri;
    }
    {% endif %}


    # Reject access with just the IP. We do not want bots or other dark forces to annoy us
    server {
        listen 80 default_server;

        {% if via.useSsl %}
        
        listen 443 ssl http2 default_server;

        ssl_certificate /etc/letsencrypt/live/via/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/via/privkey.pem;
        include /etc/letsencrypt/options-ssl-nginx.conf;
        ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

        {% endif %}

        server_name _;

        return 444; # Special code from nginx, just fails and does not return anything to caller
    }


}
